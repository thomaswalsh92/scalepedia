{"version":3,"sources":["NavBar/NavBar.js","Hero/Hero.js","Widget/ControlBar.js","Widget/KeyboardNote.js","Widget/ScaleKeyboard.js","utilities/noteNumberToLetter.js","Widget/ScaleNoteSection.js","utilities/noteNumberLookup.js","Widget/ScaleWidget.js","Widget/ChordNoteSection.js","Widget/ChordKeyboard.js","Widget/Chord.js","Widget/ChordsWidget.js","utilities/intervalLookup.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","className","Hero","ControlBar","props","label","showControls","name","rootNote","onChange","event","changeRootNote","target","value","showAs","scaleType","changeScaleType","changeScaleIntervals","htmlFor","changeShowAs","KeyboardNote","isRootStyling","opacity","backgroundColor","isWhiteLengthStyling","gridRowStart","gridRowEnd","gridColumnStart","gridCoords","gridColumnEnd","isBlackLengthStyling","isRoot","isScaleNotRoot","isWhite","style","octaveKeyIsWhite","ScaleKeyboard","keyboardNotes","i","length","noteObject","noteNumber","undefined","j","noteNumbers","push","map","keyboardNote","x","noteNumberToLetter","console","log","ScaleNoteSection","noteNumberLookup","scaleIntervals","accumulator","parseInt","keyboardLength","width","window","innerWidth","screen","ScaleWidget","id","ChordNoteSection","root","third","fifth","chordNumber","ChordKeyboard","keyboardStart","rootPrinted","thirdPrinted","fifthPrinted","Chord","ChordsWidget","chordsArr","chordObject","chord","intervalLookup","intervalTable","intervals","initScaleType","initScaleIntervals","App","React","useState","setRootNote","setScaleType","setScaleIntervals","setShowAs","newRootNote","newScaleType","newShowAs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dda5204f.chunk.js","sourcesContent":["\nexport const NavBar = () => {\n    return (\n        <div className='navBar'>\n        <p>Scalepedia</p>\n        </div>\n      );\n};\n","export const Hero = () => {\n    return (\n        <div className='hero'>\n            <p>The handy scale & chord reference!</p>\n        </div>\n      );\n};\n","export const ControlBar = (props) => {\n\n    function changeRootNote(event) {\n        props.changeRootNote(event.target.value) \n    };\n\n    function changeScaleType(event) {\n        props.changeScaleType(event.target.value) \n        props.changeScaleIntervals(event.target.value)\n    };\n\n    function changeShowAs(event) {\n        props.changeShowAs(event.target.value)\n    };\n\n    return (\n        <div className='controlBar'>\n            <div className='controlBarTitle'>\n                <p>{props.label}</p>\n            </div>\n            <div className={props.showControls ? 'controlBarControls' : 'controlBarControlsHidden'}>\n                <select name={props.rootNote}  onChange={changeRootNote} className='rootSelect'>\n                    <option value='0'>C</option>\n                    <option value='1'>{(props.showAs === 'flat') ? 'D♭' : 'C♯'}</option>\n                    <option value='2'>D</option>\n                    <option value='3'>{(props.showAs === 'flat') ? 'E♭' : 'D♯'}</option>\n                    <option value='4'>E</option>\n                    <option value='5'>F</option>\n                    <option value='6'>{(props.showAs === 'flat')  ? 'G♭' : 'F♯'}</option>\n                    <option value='7'>G</option>\n                    <option value='8'>{(props.showAs === 'flat')  ? 'A♭' : 'G♯'}</option>\n                    <option value='9'>A</option>\n                    <option value='10'>{(props.showAs === 'flat')  ? 'B♭' : 'A♯'}</option>\n                    <option value='11'>B</option>\n                </select>\n                <select name={props.scaleType} onChange={changeScaleType} className='scaleSelect'>\n                    <optgroup label='Standard'>\n                    <option value='major'>Major</option>\n                    <option value='minor'>Minor</option>\n                    </optgroup>\n                    <optgroup label='Modes'>\n                    <option value='ionian'>Ionian</option>\n                    <option value='dorian'>Dorian</option>\n                    <option value='phyrgian'>Phrygian</option>\n                    <option value='lydian'>Lydian</option>\n                    <option value='mixolydian'>Mixolydian</option>\n                    <option value='aeolian'>Aeolian</option>\n                    <option value='locrian'>Locrian</option>\n                    </optgroup>\n                </select>\n                <label htmlFor='show-as'>Show as</label>\n                <select name={props.showAs} onChange={changeShowAs} className='showAsSelect'>\n                    <option value='flat'>Flat</option>\n                    <option value='sharp'>Sharp</option>\n                </select>\n            </div>\n        </div> \n    );\n};\n","\nexport const KeyboardNote = (props) => {\n    let isRootStyling = {\n        opacity: '0%',\n        backgroundColor: '$lightBlue',\n    }\n    \n    const isWhiteLengthStyling = {\n        gridRowStart: '1',\n        gridRowEnd: '4',\n        gridColumnStart: props.gridCoords.gridColumnStart,\n        gridColumnEnd: props.gridCoords.gridColumnEnd\n    }\n\n    const isBlackLengthStyling = {\n        gridRowStart: '1',\n        gridRowEnd: '3',\n        gridColumnStart: props.gridCoords.gridColumnStart,\n        gridColumnEnd: props.gridCoords.gridColumnEnd\n    }\n\n    if (props.isRoot === true) {\n        isRootStyling.opacity = '100%'\n        isRootStyling.backgroundColor = '#D34242'\n    } \n\n    if (props.isScaleNotRoot === true) {\n        isRootStyling.opacity = '100%'\n        isRootStyling.backgroundColor = '#FFA400'\n    } \n\n    return (\n        <div \n        className={props.isWhite ? \"keyboardNoteWhite\" : \"keyboardNoteBlack\"} \n        style={props.isWhite ? isWhiteLengthStyling : isBlackLengthStyling}\n        >\n            { <div \n            className=\"keyboardNoteHighlight\"\n            style={isRootStyling}>\n            \n            </div> }\n        </div>\n    );\n\n}","import { KeyboardNote } from '../Widget/KeyboardNote.js'\n\n// aligns note values with black keys on keyboard.\nconst octaveKeyIsWhite = [true, false, true, false, true, true, false, true, false, true, false, true]\n\n// keyboard takes the state notes array, a start position \n// and a length param and creates a keyboard graphic.\n// NOTE START POSITION IS NOT IMPLEMENTED YET, THIS WILL BE NEEDED FOR CHORD MODE. \nexport const ScaleKeyboard = (props) => {\n    // this array will be filled with noteObjects that will then be mapped into KeyboardNote components\n    let keyboardNotes = []\n    let gridCoords = {\n        gridColumnStart: 0,\n        gridColumnEnd: 0,\n        }\n\n    //below code loops according to props.length param, and initialises\n    //an empty noteObject which will later be pushed into an array to\n    //to be mapped into the keyboard component.\n    for (let i = 0; i < props.length; i++) {\n        let noteObject = {\n            isWhite: null,\n            isRoot: false,\n            isScaleNotRoot: false,\n            noteNumber: null,\n            gridCoords: {\n                gridColumnStart: '',\n                gridColumnEnd: ''\n            }\n        }\n        \n        // gives a noteNumber that should correspond with standard\n        // note number in the app C is 0, D is 2 etc. \n        noteObject.noteNumber = i % 12\n\n        // checks the props.length iteration against the octaveKeyIsWhite\n        // array, and sets the note object isWhite property \n        // accordingly.\n        if (octaveKeyIsWhite[i % 12] === true) {\n            noteObject.isWhite = true\n        } else {\n            noteObject.isWhite = false\n        };\n        \n        // this code increments the values in gridCoords according to whether the\n        // note is the first note, a white note following a white (B to C, E to F)\n        // or a black note following a white note (or vice-versa). Coords values are \n        // taken in the note object in each i increment and maps these values to the \n        // keyboardNote components allowing correct CSS grid values to be computed.\n        if ((gridCoords.gridColumnStart === 0) && (gridCoords.gridColumnEnd === 0)) {\n            noteObject.gridCoords.gridColumnStart = gridCoords.gridColumnStart = 1\n            noteObject.gridCoords.gridColumnEnd = gridCoords.gridColumnEnd = 6\n        } \n        else if ((octaveKeyIsWhite[i % 12] === true) && ((octaveKeyIsWhite[(i % 12) - 1] === true)) || (octaveKeyIsWhite[(i % 12) - 1] === undefined)) {\n            noteObject.gridCoords.gridColumnStart = gridCoords.gridColumnStart += 6\n            noteObject.gridCoords.gridColumnEnd = gridCoords.gridColumnEnd += 6\n        } else  {\n            noteObject.gridCoords.gridColumnStart = gridCoords.gridColumnStart += 3\n            noteObject.gridCoords.gridColumnEnd =gridCoords.gridColumnEnd += 3\n        };\n\n        // for each loop of props.length, this loop checks if \n        // i (same as noteNumber) matches with any of the props.noteNumbers\n        // array held in state. If it matches at index 0 in props.noteNumbers,\n        // this is the root and the isRoot property updated accordingly.\n        // else if the match it's at any other index position, the \n        // isScaleNotRoot property updated accordingly. \n\n        for (let j = 0; j < props.noteNumbers.length; j++) {\n            if ((i % 12) === props.noteNumbers[j] && j === 0) {\n                noteObject.isRoot = true\n            } \n            else if ((i % 12) === props.noteNumbers[j]) {\n                noteObject.isScaleNotRoot = true\n            }\n        }\n        // each noteObject is pushed to the keyboardNotes array which\n        // will be return as a keyboard note component using .map. The object \n        // properties will be used to correctly format these.\n        keyboardNotes.push(noteObject)\n    } \n    return (\n        <div className=\"keyboard\">\n            {keyboardNotes.map((keyboardNote, x) => (\n            <KeyboardNote \n            key={x} \n            noteNumber={keyboardNote.noteNumber}\n            isWhite={keyboardNote.isWhite} \n            isRoot={keyboardNote.isRoot} \n            isScaleNotRoot={keyboardNote.isScaleNotRoot}\n            showAs={props.showAs}\n            gridCoords={keyboardNote.gridCoords}\n            />))} \n        </div>\n    )\n}\n","//takes a single noteNumber and returns the value as a note Letter\n\nexport const noteNumberToLetter = (noteNumber, showAs) => { \n    //console.log (`the note number is ${noteNumber}, the showAs is ${showAs}`)\n    if (showAs === 'flat') {\n        switch (noteNumber) {\n            case 0:\n                return 'C';\n            case 1:\n                return 'D♭'\n            case 2:\n                return 'D';\n            case 3:\n                return 'E♭';\n            case 4:\n                return 'E';\n            case 5:\n                return 'F';\n            case 6:\n                return 'G♭';\n            case 7:\n                return 'G';\n            case 8:\n                return 'A♭';\n            case 9:\n                return 'A';\n            case 10:\n                return 'B♭';\n            case 11:\n                return 'B';\n            default:\n                console.log('Invalid noteNumber value.');\n            };\n    } else if (showAs === 'sharp') {\n        switch (noteNumber) {\n            case 0:\n                return 'C';\n            case 1:\n                return 'C♯'\n            case 2:\n                return 'D';\n            case 3:\n                return 'D♯';\n            case 4:\n                return 'E';\n            case 5:\n                return 'F';\n            case 6:\n                return 'F♯';\n            case 7:\n                return 'G';\n            case 8:\n                return 'G♯';\n            case 9:\n                return 'A';\n            case 10:\n                return 'A♯';\n            case 11:\n                return 'B';\n            default:\n                console.log('Invalid noteNumber value.');\n            };\n    } else {\n        console.log('Invalid noteNumber value.');\n    };\n};\n","\nimport { noteNumberToLetter} from '../utilities/noteNumberToLetter.js'\n\nexport const ScaleNoteSection = (props) => {\n\n    return (\n        <div className='noteSection'>\n            <div className='noteSectionTable'>\n                <div className=\"tableHeader\">\n                    <div className=\"rootNote\">\n                        <p>Rt.</p>\n                    </div>\n                    <div className=\"scaleNote\">\n                        <p>2nd</p>\n                    </div>\n                    <div className=\"scaleNote\">\n                        <p>3rd</p>\n                    </div>\n                    <div className=\"scaleNote\">\n                        <p>4th</p>\n                    </div>\n                    <div className=\"scaleNote\">\n                        <p>5th</p>\n                    </div>\n                    <div className=\"scaleNote\">\n                        <p>6th</p>\n                    </div>\n                    <div className=\"scaleNote\">\n                        <p>7th</p>\n                    </div>\n                </div>\n                <div className=\"tableData\">\n                    <div><p>{noteNumberToLetter(props.noteNumbers[0], props.showAs)}</p></div>\n                    <div><p>{noteNumberToLetter(props.noteNumbers[1], props.showAs)}</p></div>\n                    <div><p>{noteNumberToLetter(props.noteNumbers[2], props.showAs)}</p></div>\n                    <div><p>{noteNumberToLetter(props.noteNumbers[3], props.showAs)}</p></div>\n                    <div><p>{noteNumberToLetter(props.noteNumbers[4], props.showAs)}</p></div>\n                    <div><p>{noteNumberToLetter(props.noteNumbers[5], props.showAs)}</p></div>\n                    <div><p>{noteNumberToLetter(props.noteNumbers[6], props.showAs)}</p></div>\n                </div>\n            </div>\n        </div>\n      );\n};\n\n","// this module will when provided a root note number and an nterval array produce an \n//array of values corresponding to the notes in that scale. \n\nexport const noteNumberLookup = (rootNote, scaleIntervals) => {\n    //console.log (`calling noteNumberLook up and the root note is: ${rootNote}, scaleIntervals is ${scaleIntervals}`)\n    let noteNumbers = []\n    let accumulator = 0\n    for (let i in scaleIntervals) {\n        accumulator += parseInt(scaleIntervals[i])\n        noteNumbers.push((parseInt(rootNote) + accumulator) % 12)\n    }\n    return noteNumbers\n};","import { ControlBar } from './ControlBar.js'\nimport { ScaleKeyboard } from './ScaleKeyboard.js'\nimport { ScaleNoteSection } from './ScaleNoteSection.js'\nimport { noteNumberLookup } from '../utilities/noteNumberLookup.js';\n\nlet keyboardLength = '24'\n\n\n// eslint-disable-next-line no-restricted-globals\nlet width = (window.innerWidth > 0) ? window.innerWidth : screen.width;\n\nif (width >= 768) {\n    keyboardLength = '36'\n}\n\nif (width >= 1201) {\n    keyboardLength = '48'\n}\n\n\n\nexport const ScaleWidget = (props) => {\n    const noteNumbers = noteNumberLookup(props.rootNote, props.scaleIntervals)\n\n    return (\n        <div className='widget' id='scale'>\n            <ControlBar \n            label={'Scales'}\n            showControls={true}\n            rootNote={props.rootNote} \n            changeRootNote={props.changeRootNote} \n            scaleType={props.scaleType} \n            changeScaleType={props.changeScaleType}\n            scaleIntervals={props.scaleIntervals}\n            changeScaleIntervals={props.changeScaleIntervals}\n            showAs={props.showAs}\n            changeShowAs={props.changeShowAs} />\n            <ScaleKeyboard \n            length={keyboardLength} \n            noteNumbers={noteNumbers} \n            showAs={props.showAs}\n            />\n            <ScaleNoteSection \n            showAs={props.showAs}\n            noteNumbers={noteNumbers}\n            /> \n        </div>\n    );\n};\n","\nimport { noteNumberToLetter} from '../utilities/noteNumberToLetter.js'\n\nexport const ChordNoteSection = (props) => {\n\n    return (\n        <div className='noteSection'>\n            <div className='noteSectionTable'>\n                <div className=\"tableHeader\">\n                    <div className=\"rootNote\">\n                        <p>Rt.</p>\n                    </div>\n                    <div className=\"scaleNote\">\n                        <p>2nd</p>\n                    </div>\n                    <div className=\"scaleNote\">\n                        <p>3rd</p>\n                    </div>            \n                </div>\n                <div className=\"tableData\">\n                    <div><p>{noteNumberToLetter(props.root, props.showAs)}</p></div>\n                    <div><p>{noteNumberToLetter(props.third, props.showAs)}</p></div>\n                    <div><p>{noteNumberToLetter(props.fifth, props.showAs)}</p></div>\n                </div>\n            </div>\n            <p className='chordLabel'>{props.chordNumber + 1} Chord</p>\n        </div>\n    );\n};\n\n","import { KeyboardNote } from '../Widget/KeyboardNote.js'\n\nconst octaveKeyIsWhite = [true, false, true, false, true, true, false, true, false, true, false, true]\n\nexport const ChordKeyboard = (props) => {\n    // this array will be filled with noteObjects that will then be mapped into KeyboardNote components\n    let keyboardNotes = []\n    let keyboardStart = 0\n    let keyboardLength = 17\n    let gridCoords = {\n        gridColumnStart: 0,\n        gridColumnEnd: 0,\n        }\n    \n    // code branches based on if it needs to be a C block or F block chord. \n    //All chords starting between C and E will be C block, F to B will be F block.\n    if (props.root > 4) {\n        keyboardStart = 5\n    }\n\n    let rootPrinted = false;\n    let thirdPrinted = false;\n    let fifthPrinted = false;\n    //below code loops according to keyboardLength param, and initialises\n    //an empty noteObject which will later be pushed into an array to\n    //to be mapped into the keyboard component.\n    for (let i = 0; i < keyboardLength; i++) {\n        let noteObject = {\n            isWhite: null,\n            isRoot: false,\n            isScaleNotRoot: false,\n            noteNumber: null,\n            gridCoords: {\n                gridColumnStart: '',\n                gridColumnEnd: ''\n            }\n        }\n        \n        // gives a noteNumber that should correspond with standard\n        // note number in the app C is 0, D is 2 etc. \n        noteObject.noteNumber = i + keyboardStart % 12\n\n        // checks the props.length iteration against the octaveKeyIsWhite\n        // array, and sets the note object isWhite property \n        // accordingly.\n        if (octaveKeyIsWhite[(i + keyboardStart) % 12] === true) {\n            noteObject.isWhite = true\n        } else {\n            noteObject.isWhite = false\n        };\n\n        // this code increments the values in gridCoords according to whether the\n        // note is the first note, a white note following a white (B to C, E to F)\n        // or a black note following a white note (or vice-versa). Coords values are \n        // taken in the note object in each i increment and maps these values to the \n        // keyboardNote components allowing correct CSS grid values to be computed.\n        if (((gridCoords.gridColumnStart) === 0) && ((gridCoords.gridColumnEnd) === 0)) {\n            noteObject.gridCoords.gridColumnStart = gridCoords.gridColumnStart = 1\n            noteObject.gridCoords.gridColumnEnd = gridCoords.gridColumnEnd = 6\n        } \n        else if ((octaveKeyIsWhite[(i + keyboardStart) % 12] === true) && ((octaveKeyIsWhite[((i + keyboardStart) % 12) - 1] === true)) || (octaveKeyIsWhite[((i + keyboardStart) % 12) - 1] === undefined)) {\n            noteObject.gridCoords.gridColumnStart = gridCoords.gridColumnStart += 6\n            noteObject.gridCoords.gridColumnEnd = gridCoords.gridColumnEnd += 6\n        } else  {\n            noteObject.gridCoords.gridColumnStart = gridCoords.gridColumnStart += 3\n            noteObject.gridCoords.gridColumnEnd =gridCoords.gridColumnEnd += 3\n        };\n\n        // for each loop of props.length, this loop checks if \n        // i (same as noteNumber) matches with any of the props.noteNumbers\n        // array held in state. If it matches at index 0 in props.noteNumbers,\n        // this is the root and the isRoot property updated accordingly.\n        // else if the match it's at any other index position, the \n        // isScaleNotRoot property updated accordingly. \n        \n        for (let j = 0; j < keyboardLength; j++) {\n            if ((((i + keyboardStart) % 12) === props.root) && !rootPrinted ) {\n                noteObject.isRoot = true\n                rootPrinted = true\n            }  \n            else if ((((i + keyboardStart) % 12) === props.third) && !thirdPrinted && rootPrinted) {\n                noteObject.isScaleNotRoot = true\n                thirdPrinted = true\n            } \n            else if ((((i + keyboardStart) % 12) === props.fifth) && !fifthPrinted && thirdPrinted) {\n                noteObject.isScaleNotRoot = true\n                fifthPrinted = true\n            } \n        } \n        // each noteObject is pushed to the keyboardNotes array which\n        // will be return as a keyboard note component using .map. The object \n        // properties will be used to correctly format these.\n        keyboardNotes.push(noteObject)\n    } \n    return (\n        <div className=\"keyboard\">\n            {keyboardNotes.map((keyboardNote, x) => (\n            <KeyboardNote \n            key={x} \n            noteNumber={keyboardNote.noteNumber}\n            isWhite={keyboardNote.isWhite} \n            isRoot={keyboardNote.isRoot} \n            isScaleNotRoot={keyboardNote.isScaleNotRoot}\n            showAs={props.showAs}\n            gridCoords={keyboardNote.gridCoords}\n            />))} \n        </div>\n    )\n}","import { ChordNoteSection } from \"./ChordNoteSection\"\nimport { ChordKeyboard } from \"./ChordKeyboard\"\n\nexport const Chord = (props) => {\n    return (\n        <div className='chord'>\n            {<ChordKeyboard \n            length='12'\n            root={props.root} \n            third={props.third}\n            fifth={props.fifth}\n            />}\n            <ChordNoteSection \n            showAs={props.showAs}\n            root={props.root} \n            third={props.third}\n            fifth={props.fifth}\n            chordNumber={props.chordNumber}\n            />\n        </div>\n    )\n}","import { ControlBar } from './ControlBar.js'\nimport { Chord } from './Chord.js'\nimport { noteNumberLookup } from '../utilities/noteNumberLookup.js';\n\n\n// this components needs to take the note numbers, create an array of chord objects\n// this array of chord objects is then .mapped into the chordWidget return statement.\nexport const ChordsWidget = (props) => {\n    const noteNumbers = noteNumberLookup(props.rootNote, props.scaleIntervals)\n    let chordsArr = []\n\n    for (let i = 0; i < noteNumbers.length; i++) {\n        let chordObject = {\n            root: noteNumbers[i % 7],\n            third: noteNumbers[(i + 2) % 7],\n            fifth: noteNumbers[(i + 4) % 7]\n        }\n        chordsArr.push(chordObject)\n    }\n\n    return (\n        <div className='widget' id='chords'>\n            <ControlBar \n            label={'Chords'}\n            showControls={false}\n            />\n            <div className='chordContainer'>\n            {chordsArr.map((chord, x) => (\n            <Chord\n            key={x} \n            chordNumber={x}\n            showAs={props.showAs}\n            root={chord.root}\n            third={chord.third}\n            fifth={chord.fifth}\n            />))} \n            </div>\n        </div>\n    );\n};","\n\nexport const intervalLookup = (scaleType) => {\n    const intervalTable = [\n        { scaleType: 'major', \n          intervals: [0, 2, 2, 1, 2, 2, 2]\n        },\n        { scaleType: 'minor', \n          intervals: [0, 2, 1, 2, 2, 1, 2]\n        },\n        { scaleType: 'ionian', \n          intervals: [0, 2, 2, 1, 2, 2, 2]\n        },\n        { scaleType: 'dorian', \n          intervals: [0, 2, 1, 2, 2, 2, 1]\n        },\n        { scaleType: 'phyrgian', \n          intervals: [0, 1, 2, 2, 2, 1, 2]\n        },\n        { scaleType: 'lydian', \n          intervals: [0, 2, 2, 2, 1, 2, 2]\n        },\n        { scaleType: 'mixolydian', \n          intervals: [0, 2, 2, 1, 2, 2, 1]\n        },\n        { scaleType: 'aeolian', \n          intervals: [0, 2, 1, 2, 2, 1, 2]\n        },\n        { scaleType: 'locrian', \n          intervals: [0, 1, 2, 2, 1, 2, 2]\n        },\n    ]\n    for (const i in intervalTable) {\n        if (scaleType === intervalTable[i].scaleType) {\n            return intervalTable[i].intervals\n        }\n    }\n}\n\n","\nimport './fonts.css'\nimport './App.scss';\nimport React, { useState } from 'react';\nimport { NavBar } from './NavBar/NavBar.js'\nimport { Hero } from './Hero/Hero.js'\nimport { ScaleWidget } from './Widget/ScaleWidget';\nimport { ChordsWidget } from './Widget/ChordsWidget';\nimport { intervalLookup } from './utilities/intervalLookup.js'\n\n//Initial variables required to ensure app loads with required data. Dirty but works. \nconst initRootNote = 0\nconst initScaleType = 'major'\nconst initScaleIntervals = intervalLookup(initScaleType)\nconst initShowAs = 'flat'\n\nfunction App() {\n\n  const [rootNote, setRootNote ] = React.useState(initRootNote)\n  const [scaleType, setScaleType ] = React.useState(initScaleType)\n  const [scaleIntervals, setScaleIntervals ] = React.useState(initScaleIntervals)\n  const [showAs, setShowAs ] = React.useState(initShowAs)\n  \n  function changeRootNote(newRootNote) {\n    setRootNote(newRootNote);\n  }\n\n  function changeScaleType (newScaleType) {\n    setScaleType(newScaleType);\n  }\n\n  function changeScaleIntervals (newRootNote) {\n    setScaleIntervals(intervalLookup(newRootNote));\n  }\n\n  function changeShowAs (newShowAs) {\n    setShowAs(newShowAs);\n  }\n\n  return (\n    <div className='app'>\n      <div className='margin'> \n      </div>\n      <div className='contentContainer'>\n        <NavBar />\n        <Hero />\n        <div className='main'>\n          <ScaleWidget \n          rootNote={rootNote} \n          changeRootNote={changeRootNote} \n          scaleType={scaleType} \n          changeScaleType={changeScaleType} \n          scaleIntervals={scaleIntervals}\n          changeScaleIntervals={changeScaleIntervals}\n          showAs={showAs}\n          changeShowAs={changeShowAs}\n          />\n          <ChordsWidget \n          rootNote={rootNote} \n          changeRootNote={changeRootNote} \n          scaleType={scaleType} \n          changeScaleType={changeScaleType} \n          scaleIntervals={scaleIntervals}\n          changeScaleIntervals={changeScaleIntervals}\n          showAs={showAs}\n          changeShowAs={changeShowAs}\n          />\n        </div>\n      </div>\n      <div className='margin'>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}